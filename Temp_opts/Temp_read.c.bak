/* A Sample Program to set GPIO pin 15 direction ADC INPUT 
**
** Author: Xiao Yang
**
*/

#include <stdio.h>
#include <fcntl.h>
#include <stdlib.h>
#include <string.h>
#include <openssl/rsa.h>
#include <openssl/pem.h>
#include <openssl/err.h>

#define OPENSSLKEY "/home/root/private.pem"
#define PUBLICKEY "/home/root/public.pem"
#define BUFFSIZE 1024
char* my_encrypt(char *str,char *path_key);
char* my_decrypt(char *str,char *path_key);

#define GPIO_DIRECTION_PATH "/sys/class/gpio/gpio%d/direction"
#define GPIO_VALUE_PATH "/sys/bus/iio/devices/iio:device1/in_voltage%d_raw"
#define GPIO_EXPORT_PATH "/sys/class/gpio/export"
#define PLUP_DIRECTION_PATH "/sys/class/gpio/gpio%d/direction"
#define TRIG_ALL_DIRECTION_PATH "/sys/class/gpio/gpio%d/direction"
#define BUFOUT_DIRECTION_PATH "/sys/class/gpio/gpio%d/direction"
#define BUFFER 60

int main()
{
//GPIO Pin 13
	int gpio_pin = 201;
	int bufout_pin = 233;
	int plup_pin = 209;
	int trig_all_pin = 214;
    int analog_nu=1;
//Path Variables
	char gpio_exp_path[BUFFER];
	char gpio_direction_path[BUFFER];
	char gpio_value_path[BUFFER];
	char bufout_direction_path[BUFFER];
	char plup_direction_path[BUFFER]; 
	char trig_all_direction_path[BUFFER];
//analog data
    char *source;
    char *ptr_en,*ptr_de;
    int fsize;
//digital data
    int temp_value;
//Files
	int fd_export, fd_val, fd_dir;
	int err = 0;
//Set GPIO Paths
	snprintf(gpio_exp_path, BUFFER, GPIO_EXPORT_PATH, gpio_pin); //
	snprintf(gpio_direction_path, BUFFER, GPIO_DIRECTION_PATH, gpio_pin);
	snprintf(gpio_value_path, BUFFER, GPIO_VALUE_PATH, analog_nu);
	snprintf(bufout_direction_path, BUFFER, BUFOUT_DIRECTION_PATH, bufout_pin);
	snprintf(plup_direction_path, BUFFER, PLUP_DIRECTION_PATH, plup_pin);
	snprintf(trig_all_direction_path, BUFFER, TRIG_ALL_DIRECTION_PATH, trig_all_pin);


	printf("%s", gpio_exp_path);
	printf("\n");
	printf("%s", gpio_direction_path);
	printf("\n");
	printf("%s", gpio_value_path);
	printf("\n");
	printf("%s", bufout_direction_path);
	printf("\n");
	printf("%s", plup_direction_path);
	printf("\n");
	printf("%s", trig_all_direction_path);
	printf("\n");


// Export GPIO
	fd_export = open(gpio_exp_path, O_WRONLY);
	if(fd_export < 0){
		perror("Can't Open Export File");
		return -1;
	}else
	{
		char buf[15];
		sprintf(buf,"%d",gpio_pin);
		write(fd_export, buf, sizeof(buf));
		sprintf(buf,"%d",bufout_pin);
		write(fd_export, buf, sizeof(buf));
		sprintf(buf,"%d",plup_pin);
		write(fd_export, buf, sizeof(buf));
		sprintf(buf,"%d",trig_all_pin);
		write(fd_export, buf, sizeof(buf));
		close(fd_export);
	}

//Set Direction
	fd_dir = open(trig_all_direction_path, O_WRONLY);
	if(fd_dir < 0){
		perror("Can't Open TRIG_ALL Direction File");
	}else{
		write(fd_dir,"low", sizeof("low"));
		printf("Set trig_all_direction %d value as LOW\n", trig_all_pin);
		close(fd_dir);
	}
	fd_dir = open(bufout_direction_path, O_WRONLY);
	if(fd_dir < 0){
		perror("Can't Open BUFOUT Direction File");
	}else{
		write(fd_dir,"low", sizeof("low"));
		printf("Set bufout_direction %d value as High\n", bufout_pin);
		close(fd_dir);
	}
        fd_dir = open(plup_direction_path, O_WRONLY);
        if(fd_dir < 0){
                perror("Can't Open PLUP Direction File");
        }else{
                write(fd_dir,"in", sizeof("in"));
		printf("Set plup_direction %d value as in\n", plup_pin);
                close(fd_dir);
        }
        fd_dir = open(trig_all_direction_path, O_WRONLY);
        if(fd_dir < 0){
                perror("Can't Open TRIG_ALL Direction File");
        }else{
                write(fd_dir,"high", sizeof("high"));
		printf("Set trig_all_direction %d value as High\n", trig_all_pin);
                close(fd_dir);
        }

//Read value
    fd_val=fopen(gpio_value_path,"r");
    fseek(fd_val,0,SEEK_END);
    fsize=ftell(fd_val);
    printf("file size\n %d\n",fsize);

    source=(char *)malloc(fsize * sizeof(char));
    // read file to string pointer
    fseek(fd_val,0,SEEK_SET);
    fread(source,fsize,sizeof(char),fd_val);
    fclose(fd_val);
    printf("\nsource is : %s \n",source);

    ptr_en=my_encrypt(source,PUBLICKEY);
    printf("after encrypt: %s\n",ptr_en);
    ptr_de=my_decrypt(ptr_en,OPENSSLKEY);
    printf("after decrypt: %s\n",ptr_de);

// Calculate temperature
    temp_value = atoi(ptr_de)*500/4096;
    printf("temperature value is: %dC. \n",temp_value);

    if(ptr_en!=NULL){
        free(ptr_en);
    }
    if(ptr_de!=NULL){
        free(ptr_de);
    }

// Close the Files
	return 0;
}

char *my_encrypt(char *str,char *path_key){
    char *p_en; 
    RSA *p_rsa; 
    FILE *file; 
    int flen,rsa_len;
    if((file=fopen(path_key,"r"))==NULL){
        perror("open key file error");
        return NULL;
    }
    if((p_rsa=PEM_read_RSA_PUBKEY(file,NULL,NULL,NULL))==NULL){
    //if((p_rsa=PEM_read_RSAPublicKey(file,NULL,NULL,NULL))==NULL){ ?????????,????????????
        ERR_print_errors_fp(stdout);
        return NULL;
    }
    flen=strlen(str);
    rsa_len=RSA_size(p_rsa);
    p_en=(unsigned char *)malloc(rsa_len+1);
    memset(p_en,0,rsa_len+1);
    if(RSA_public_encrypt(rsa_len,(unsigned char *)str,(unsigned char*)p_en,p_rsa,RSA_NO_PADDING)<0){
        return NULL;
    }
    RSA_free(p_rsa);
    fclose(file);
    return p_en;
}

char *my_decrypt(char *str,char *path_key){
    char *p_de; //?????????
    RSA *p_rsa; //?????rsa??
    FILE *file; //????
    int rsa_len;
    if((file=fopen(path_key,"r"))==NULL){
        perror("open key file error");
        return NULL;
    }
    if((p_rsa=PEM_read_RSAPrivateKey(file,NULL,NULL,NULL))==NULL){
        ERR_print_errors_fp(stdout);
        return NULL;
    }
    rsa_len=RSA_size(p_rsa);
    p_de=(unsigned char *)malloc(rsa_len+1);
    memset(p_de,0,rsa_len+1);
    if(RSA_private_decrypt(rsa_len,(unsigned char *)str,(unsigned char*)p_de,p_rsa,RSA_NO_PADDING)<0){
        return NULL;
    }
    RSA_free(p_rsa);
    fclose(file);
    return p_de;
}

/** End of GPIO Program **/
